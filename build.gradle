buildscript {
    ext.kotlin_version = "1.3.72"
    ext.tornadofx_version = "2.0.0-SNAPSHOT"
    ext.junit_version = "5.1.0"

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.1.0"
        classpath 'edu.sc.seis.gradle:launch4j:2.4.6'
        classpath 'org.openjfx:javafx:14.0.+'
        classpath "com.github.jengelman.gradle.plugins:shadow:6.0.0"
        classpath "org.openjfx:javafx-plugin:0.0.8"
        classpath "org.beryx:badass-jlink-plugin:2.20.0"
    }

}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'org.jetbrains.kotlin.jvm'
apply plugin: 'edu.sc.seis.launch4j'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'org.beryx.jlink'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

application{
    mainClassName = "com.example.demo.app.MainKt"
    applicationDefaultJvmArgs = [
            "--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED",
            "--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED"
    ]
}

javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.base', 'javafx.media']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://dl.bintray.com/kotlin/exposed/'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "no.tornado:tornadofx:$tornadofx_version"
    compile group:'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'
    compile 'org.jetbrains.exposed:exposed:0.17.7'
    compile 'no.tornado:tornadofx-controls:1.0.4'
    compile 'no.tornado:tornadofx-controlsfx:0.1'
    compile group: 'net.java.openjfx.backport', name: 'openjfx-78-backport-compat', version: '1.8.0.1'
    compile group: 'de.jensd', name: 'fontawesomefx-icons525', version: '4.2.0-9.1.2'
    compile 'org.openjfx:javafx:14.0.+'

    compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-5'

    implementation 'org.controlsfx:controlsfx:11.0.0'
    implementation 'org.openjfx:javafx:14.0.+'

    testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
}

mainClassName = "com.example.demo.app.MainKt"

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
    manifest {
        attributes(
                "Class-Path": configurations.compile.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveClassifier = "all"
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

